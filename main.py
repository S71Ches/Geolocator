from flask import Flask, request, jsonify, send_file  # –¥–æ–±–∞–≤–∏–ª–∏ send_file
import requests

app = Flask(__name__)

GOOGLE_MAPS_API_KEY = "AIzaSyBl4AG5rWjlbUtdQytBcCtqP0nBUWcNpD8"

# üîç –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É
@app.route("/get-coordinates", methods=["GET"])
def get_coordinates():
    address = request.args.get("address")

    if not address:
        return jsonify({"error": "Missing address"}), 400

    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –æ—Ç GPTs: {address}")

    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "address": address,
        "key": GOOGLE_MAPS_API_KEY,
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google: {data}")

    if data["status"] != "OK":
        return jsonify({"error": "Geocoding failed", "status": data["status"]}), 500

    location = data["results"][0]["geometry"]["location"]
    return jsonify({
        "lat": location["lat"],
        "lon": location["lng"]
    })

# üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
@app.route("/get-location", methods=["GET"])
def get_location():
    lat = request.args.get("lat")
    lon = request.args.get("lon")

    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç GPTs —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: lat={lat}, lon={lon}")

    if not lat or not lon:
        return jsonify({"error": "Missing coordinates"}), 400

    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "latlng": f"{lat},{lon}",
        "key": GOOGLE_MAPS_API_KEY,
        "result_type": "street_address"
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google: {data}")

    if data["status"] != "OK":
        return jsonify({"error": "Geocoding failed", "status": data["status"]}), 500

    address = data["results"][0]["formatted_address"]
    return jsonify({"address": address})


# ‚û°Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ Google Directions API
@app.route("/get-route", methods=["GET"])
def get_route():
    origin = request.args.get("origin")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "49.033,36.229"
    destination = request.args.get("destination")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "49.067,36.254"
    mode = request.args.get("mode", "driving")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é driving

    if not origin or not destination:
        return jsonify({"error": "Missing origin or destination"}), 400

    print(f"[DEBUG] –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç {origin} –¥–æ {destination}, —Ä–µ–∂–∏–º {mode}")

    url = "https://maps.googleapis.com/maps/api/directions/json"
    params = {
        "origin": origin,
        "destination": destination,
        "mode": mode,
        "key": GOOGLE_MAPS_API_KEY,
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google: {data}")

    if data["status"] != "OK":
        return jsonify({"error": "Directions API failed", "status": data["status"]}), 500

    route = data["routes"][0]["legs"][0]

    steps = []
    for step in route["steps"]:
        instruction = step.get("html_instructions", "")
        distance_step = step.get("distance", {}).get("value", 0)
        steps.append({
            "instruction": instruction,
            "distance": distance_step
        })

    return jsonify({
        "distance": route["distance"]["value"],
        "duration": route["duration"]["value"],
        "steps": steps
    })




# üå≥ –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π —á–µ—Ä–µ–∑ Google Places API
@app.route("/find-places", methods=["GET"])
def find_places():
    location = request.args.get("location")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "49.033,36.229"
    radius = request.args.get("radius", 1000)  # —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000
    place_type = request.args.get("type", "tourist_attraction")  # —Ç–∏–ø –º–µ—Å—Ç–∞

    if not location:
        return jsonify({"error": "Missing location"}), 400

    print(f"[DEBUG] –ü–æ–∏—Å–∫ –º–µ—Å—Ç –≤–æ–∑–ª–µ {location} —Å —Ä–∞–¥–∏—É—Å–æ–º {radius}–º, —Ç–∏–ø {place_type}")

    url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    params = {
        "location": location,
        "radius": radius,
        "type": place_type,
        "key": GOOGLE_MAPS_API_KEY,
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google: {data}")

    if data.get("status") != "OK":
        return jsonify({"error": "Places API failed", "status": data.get("status")}), 500

    places = []
    for result in data.get("results", []):
        place = {
            "name": result.get("name"),
            "address": result.get("vicinity"),
            "location": {
                "lat": result["geometry"]["location"]["lat"],
                "lng": result["geometry"]["location"]["lng"]
            }
        }
        places.append(place)

    return jsonify({"places": places})


# ‚õ∞Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤—ã—Å–æ—Ç –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ Google Elevation API
@app.route("/get-elevation", methods=["GET"])
def get_elevation():
    path = request.args.get("path")  # —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ |

    if not path:
        return jsonify({"error": "Missing path parameter"}), 400

    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –≤—ã—Å–æ—Ç –¥–ª—è –ø—É—Ç–∏: {path}")

    url = "https://maps.googleapis.com/maps/api/elevation/json"
    params = {
        "path": path,
        "samples": 100,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–±–æ—Ä–∫–∏ –ø–æ –ø—É—Ç–∏
        "key": GOOGLE_MAPS_API_KEY,
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google: {data}")

    if data.get("status") != "OK":
        return jsonify({"error": "Elevation API failed", "status": data.get("status")}), 500

    elevations = []
    for result in data.get("results", []):
        elevation_point = {
            "location": {
                "lat": result["location"]["lat"],
                "lng": result["location"]["lng"],
            },
            "elevation": result["elevation"]
        }
        elevations.append(elevation_point)

    return jsonify({"elevations": elevations})


# ‚òÄÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —á–µ—Ä–µ–∑ Google Weather API
@app.route("/get-weather", methods=["GET"])
def get_weather():
    lat = request.args.get("lat")
    lon = request.args.get("lon")
    date = request.args.get("date")  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD

    if not lat or not lon or not date:
        return jsonify({"error": "Missing lat, lon or date parameters"}), 400

    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat}, {lon} –Ω–∞ –¥–∞—Ç—É {date}")

    # –ü—Ä–∏–º–µ—Ä –¥–ª—è Google Weather API (Environment Data)
    url = f"https://weather.googleapis.com/v1/weather:lookup"
    params = {
        "location.latitude": lat,
        "location.longitude": lon,
        "timestamp": f"{date}T12:00:00Z",  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        "key": GOOGLE_MAPS_API_KEY,
    }

    response = requests.get(url, params=params)
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –≤ Google Weather: {response.url}")
    data = response.json()
    print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Google Weather: {data}")

    if "currentWeather" not in data:
        return jsonify({"error": "Weather API failed or unsupported response"}), 500

    weather = data["currentWeather"]

    return jsonify({
        "temperature": weather.get("temperature", 0),
        "condition": weather.get("conditions", "unknown"),
        "precipitation": weather.get("precipitationIntensity", 0),
        "wind_speed": weather.get("windSpeed", 0)
    })


# üßæ –û—Ç–¥–∞—á–∞ OpenAPI YAML –¥–ª—è GPTs
@app.route("/openapi.yaml")
def serve_openapi():
    return send_file("openapi.yaml", mimetype="text/yaml")


# üëã –ü–∏–Ω–≥ –¥–ª—è Render'–∞
@app.route("/", methods=["GET"])
def wake():
    return jsonify({"status": "awake"}), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
